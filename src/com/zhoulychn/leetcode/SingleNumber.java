package com.zhoulychn.leetcode;

/*

给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:

输入: [2,2,1]
输出: 1
示例 2:

输入: [4,1,2,1,2]
输出: 4

 */
public class SingleNumber {


    // 通过观察，和结合按位异或操作符的性质我们可以发现一个按位异或操作的性质：一个值和0进行按位异或操作所得为该值，相同的两个值进行异或操作，所得为0（甲 按位异或 0 得 甲，甲 按位异或 甲 得 0）。

    // 根据这个性质，由于每个重复元素重复两次，故他们在遍历后将相互抵消，而唯一元素只出现一次，故将得到保留（如果我举的例子不具有说服力，请自行演算）。
    public int singleNumber(int[] nums) {
        if (nums.length == 1) return nums[0];

        int i = 0;
        for (int num : nums) {
            i ^= num;
        }
        return i;
    }
}
